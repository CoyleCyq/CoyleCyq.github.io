(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{583:function(t,s,a){"use strict";a.r(s);var e=a(19),r=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_11-正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-正则","aria-hidden":"true"}},[t._v("#")]),t._v(" 11 正则")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%BA%86%E8%A7%A3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[t._v("了解正则表达式")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[t._v("创建正则表达式")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#RegExp%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"}},[t._v("RegExp构造函数")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%9B%B4%E6%8E%A5%E9%87%8F%E7%9B%B4%E6%8E%A5%E5%A3%B0%E6%98%8E"}},[t._v("直接量直接声明")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[t._v("使用正则表达式")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%AD%A3%E5%88%99%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95"}},[t._v("正则的字符串方法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%AD%A3%E5%88%99%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95"}},[t._v("正则的属性和方法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99"}},[t._v("匹配规则")])])])])]),t._v(" "),a("h2",{attrs:{id:"了解正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 了解正则表达式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("什么是正则表达式")]),t._v(" "),a("p",[t._v("正则表达式(regular expression)是一个描述字符模式的对象。")])]),t._v(" "),a("li",[a("p",[t._v("为什么要使用正则表达式")]),t._v(" "),a("p",[t._v("正则表达式能够进行强大的“模式匹配”和“文本检索与替换”功能。前端往往有大量的表单数据校验的工作，采用正则表达式会使得数据校验的工作量大大减轻")])])]),t._v(" "),a("h2",{attrs:{id:"创建正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建正则表达式")]),t._v(" "),a("h3",{attrs:{id:"regexp构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp构造函数","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp构造函数")]),t._v(" "),a("ul",[a("li",[t._v("第一个参数就是我们的模式“字符串”")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'study'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用特殊字符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\d\\\\w+'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\\d\\w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n")])])]),a("ul",[a("li",[t._v("第二个参数可选，模式修饰符\n"),a("ul",[a("li",[t._v("i: case-insensitive，表示忽略大小写")]),t._v(" "),a("li",[t._v("g: global，表示全局匹配")]),t._v(" "),a("li",[t._v("m: multiline，表示多行匹配")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'study'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ig'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"直接量直接声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接量直接声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 直接量直接声明")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/study/gi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("直接量是字符匹配，不支持变量")])]),t._v(" "),a("h2",{attrs:{id:"使用正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用正则表达式")]),t._v(" "),a("h3",{attrs:{id:"正则的字符串方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则的字符串方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则的字符串方法")]),t._v(" "),a("ul",[a("li",[t._v("search 返回第一次匹配时所在的索引值,如果匹配不到则返回-1")]),t._v(" "),a("li",[t._v("match\n"),a("ul",[a("li",[t._v("默认匹配字符串，返回一个数组\n"),a("ul",[a("li",[t._v("0:所匹配的字符")]),t._v(" "),a("li",[t._v("index:匹配第一个字符所在的索引")]),t._v(" "),a("li",[t._v("input:对字符串的引用")])])]),t._v(" "),a("li",[t._v("全局匹配(g)，返回一个匹配所有字符串数组")]),t._v(" "),a("li",[t._v("如果匹配不到则返回null")])])]),t._v(" "),a("li",[t._v("replace 替换字符串")]),t._v(" "),a("li",[t._v("split")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a,b ,c , d, e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\s*,\\s* /")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"正则的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则的属性和方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则的属性和方法")]),t._v(" "),a("ul",[a("li",[t._v("测试正则表达式用test方法,返回布尔值\n"),a("ul",[a("li",[t._v("格式：正则表达式.test(字符串)")]),t._v(" "),a("li",[t._v("用<正则表达式>测试<字符串>是否匹配,返回true/false")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/xx/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字符串"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("测试正则表达式exec方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/xx/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字符串"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 匹配规则")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("所有字母和数字都是按照字面量进行匹配,和字符串匹配等效\n"),a("code",[t._v("/good/gi")])])]),t._v(" "),a("li",[a("p",[t._v("字符类（只记小写字母即可）")]),t._v(" "),a("ul",[a("li",[t._v(". : 除换行以外的字符")]),t._v(" "),a("li",[t._v("\\w : 代表数字或字母或下划线")]),t._v(" "),a("li",[t._v("\\W : 非数字字母和下划线字符")]),t._v(" "),a("li",[t._v("\\d : 数字")]),t._v(" "),a("li",[t._v("\\D : 非数字")]),t._v(" "),a("li",[t._v("\\s : 代表一个空格")]),t._v(" "),a("li",[t._v("\\S : 空格以外的字符")]),t._v(" "),a("li",[t._v("\\b : 匹配一个单词边界，也就是指单词和空格间的位置")]),t._v(" "),a("li",[t._v("\\B : 匹配非单词边界。\n"),a("blockquote",[a("p",[t._v("PS:以上所有字符类都只是匹配“一个”字符")])])])])]),t._v(" "),a("li",[a("p",[t._v("特殊符号")]),t._v(" "),a("blockquote",[a("p",[t._v("^ $ . * + ? = ! : | \\ / () [] {}")])]),t._v(" "),a("ul",[a("li",[t._v("[]: 代表任意“单个字符” ,里面的内容表示“或”的关系")]),t._v(" "),a("li",[t._v("-: 代表范围")]),t._v(" "),a("li",[t._v("^: 代表非")]),t._v(" "),a("li",[t._v("(): 表示分组（n是以最左边括号出现的顺序排列）")]),t._v(" "),a("li",[t._v("$1: 表示第一个分组")]),t._v(" "),a("li",[t._v("$n: 表示第n个分组（不能写在正则表达式里）")]),t._v(" "),a("li",[t._v("\\n: 在正则分组后面使用，表示对第n个分组的引用(一定要写在正则表达式里)\n"),a("blockquote",[a("p",[t._v("PS: 编写的正则分组数量越少越好")])])])])]),t._v(" "),a("li",[a("p",[t._v("|: 表示或者")])]),t._v(" "),a("li",[a("p",[t._v("锚点定位")]),t._v(" "),a("ul",[a("li",[t._v("^: 表示以什么开头")]),t._v(" "),a("li",[t._v("$: 表示以什么结尾")])])]),t._v(" "),a("li",[a("p",[t._v("表示数量，对前一个字符计数，")]),t._v(" "),a("ul",[a("li",[t._v("*: 代表0个或0个以上 <===>{0,}")]),t._v(" "),a("li",[t._v("+: 代表1个或1个以上 <===>{1,}")]),t._v(" "),a("li",[t._v("?: 代表0个或1个 <===>{0,1}")]),t._v(" "),a("li",[t._v("{}:")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\\d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配5个数字")]),t._v("\n\\d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配5个到10个数字")]),t._v("\n\\d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配5个或5个以上的数字")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("PS:"),a("br"),t._v("\n1）数量词*,+,{5,}，会尽可能多的去匹配结果（贪婪）"),a("br"),t._v("\n2）在后面加一个?表示尽可能少的去匹配结果（非贪婪）"),a("br"),t._v("\ngoogle,goooogle ==> /go+/")])])])},[],!1,null,null,null);s.default=r.exports}}]);